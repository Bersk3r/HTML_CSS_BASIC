# HTML : HyperText Markup Language, 웹의 구조 + 컨텐츠
# 웹 사이트를 웹 문서과 웹 애플리케이션 중 웹 애플리케이션으로 보는 게 많음
# CSS : Cascading Style Sheet, 디자인
# Javascript : 웹의 동작 (과거) , 웹의 모든 것 (현재)
# document.head.parentNode.removeChild(document.head); =>  CSS가 사라짐 (head에 css를 정의하므로, 완전하게 사라진 것은 아님 = 인라인으로 작성된 부분도 존재하므로)

# HTML은 트리 구조로 되어 있음 (부모-자식-형제, 계층 구조)
# 태그 구조는 하기와 같습니다.
<parent>
    <children>
        <grandchildren>
        <grandchildren>
    </children>
    <sibling>
        <grandchildren>
        <grandchildren>
    </sibling>
</parent>

# HTML은 문법이 엄격하지 않아, body/head에 들어갈 내용이 아무데나 들어가도 동작합
# HTML 내 여는 태그만으로 동작하는 경우, 내부에 들어갈 태그나 내용이 없을 때에 해당됨
=> <meta charset="utf-8" />
=> 여는 태그만 작성해도 동작하더라도 닫는 태그는 반드시 작성할 것
# 시멘틱 태그 : header, nav, main, footer, article, asside, figure와 같이 "div id~"와 동일하나, 의미를 가지는 태그
=> 시멘틱 태그는 웹 제약 사항이 존재함.
=> 이러한 웹 제약 사항을 웹 표준이라고 함.
# CSS 구조는 "속성명: 속성값" 형태이며, 여러 개 일때에는 세미콜론으로 구분 (속성명: 속성값; 속성명2: 속성값2)
# HTML 태그 내에 CSS를 정의하는 것을 인라인 스타일이라고 함. (비권장)
# user agent stylesheet는 브라우저에서 정의한 CSS라고 이해하면 됨
# CSS는 조상/부모 태그에 대한 CSS 속성을 자식 태그가 덮어쓰는 특징을 가지고 있음
# 각 브라우저에서 호환되게 끔 잘 처리하는 것을 크로스 브라우징이라고 부름
# CSS에서 px 단위는 상대적인 단위 (모니터 크기에 따라 달라짐)
=> screen.width / screen.height : 화면의 너비/높이를 보여줌
# CSS에서 선택자와 속성들을 외어야 됨.
# CSS 내 display 속성의 값에는 block, inline-block, inline, none이 있다.
=> block은 너비 100% 차지, inline-block에는 width/height 지정 가능, inline은 컨텐츠의 너비만큼 공간 차지 (margin X)
# HTML 내에서 id는 고유한 값, class는 중복 사용 가능 (또한, 동시 사용도 가능)
=> ex) <div class="blind wook jim" />
# 이미지 한 개에 관련 있는 여러 개의 이미지를 합쳐놓은 것을 이미지 스프라이트라고 함
=> HTTP/2 프로토콜의 등장으로 네트워크 환경이 개선되었으나, 이전에는 이미지 각각 다른 곳에서 가져오는 걸 동시에 하는 게 어려웠음